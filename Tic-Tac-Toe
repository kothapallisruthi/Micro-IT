<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Tic-Tac-Toe</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      text-align: center;
      background-color: #f4f4f4;
    }

    h1 {
      margin-top: 30px;
    }

    .game {
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    .board {
      display: grid;
      grid-template-columns: repeat(3, 100px);
      grid-gap: 5px;
      margin: 20px 0;
    }

    .cell {
      width: 100px;
      height: 100px;
      background-color: #fff;
      font-size: 2.5em;
      display: flex;
      justify-content: center;
      align-items: center;
      cursor: pointer;
      border: 2px solid #333;
    }

    .cell:hover {
      background-color: #eee;
    }

    .status {
      font-size: 1.2em;
      margin-bottom: 10px;
    }

    button {
      padding: 10px 20px;
      font-size: 1em;
      cursor: pointer;
    }
  </style>
</head>
<body>
  <h1>Tic-Tac-Toe</h1>
  <div class="game">
    <div id="board" class="board"></div>
    <div id="status" class="status">Player X's turn</div>
    <button id="reset">Restart Game</button>
  </div>

  <script>
    const boardElement = document.getElementById("board");
    const statusElement = document.getElementById("status");
    const resetButton = document.getElementById("reset");

    let board = ["", "", "", "", "", "", "", "", ""];
    let currentPlayer = "X";
    let gameActive = true;

    const winningCombinations = [
      [0, 1, 2],
      [3, 4, 5],
      [6, 7, 8],
      [0, 3, 6],
      [1, 4, 7],
      [2, 5, 8],
      [0, 4, 8],
      [2, 4, 6],
    ];

    function handleCellClick(index) {
      if (board[index] !== "" || !gameActive) return;

      board[index] = currentPlayer;
      renderBoard();
      if (checkWinner()) {
        statusElement.textContent = `Player ${currentPlayer} wins!`;
        gameActive = false;
      } else if (board.every(cell => cell !== "")) {
        statusElement.textContent = "It's a draw!";
        gameActive = false;
      } else {
        currentPlayer = currentPlayer === "X" ? "O" : "X";
        statusElement.textContent = `Player ${currentPlayer}'s turn`;
      }
    }

    function checkWinner() {
      return winningCombinations.some(combination => {
        const [a, b, c] = combination;
        return (
          board[a] !== "" &&
          board[a] === board[b] &&
          board[b] === board[c]
        );
      });
    }

    function renderBoard() {
      boardElement.innerHTML = "";
      board.forEach((cell, index) => {
        const cellElement = document.createElement("div");
        cellElement.classList.add("cell");
        cellElement.textContent = cell;
        cellElement.addEventListener("click", () => handleCellClick(index));
        boardElement.appendChild(cellElement);
      });
    }

    function resetGame() {
      board = ["", "", "", "", "", "", "", "", ""];
      currentPlayer = "X";
      gameActive = true;
      statusElement.textContent = `Player ${currentPlayer}'s turn`;
      renderBoard();
    }

    resetButton.addEventListener("click", resetGame);

    // Initialize the game on page load
    renderBoard();
  </script>
</body>
</html>
